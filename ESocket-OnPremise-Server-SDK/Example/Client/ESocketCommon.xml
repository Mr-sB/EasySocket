<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESocketCommon</name>
    </assembly>
    <members>
        <member name="F:ESocket.Common.ESocketConst.ReceiveBufferSize">
            <summary>
            接收缓冲区大小/byte
            </summary>
        </member>
        <member name="F:ESocket.Common.ESocketConst.SendHeartbeatInterval">
            <summary>
            发送心跳包间隔/s
            </summary>
        </member>
        <member name="F:ESocket.Common.ESocketConst.HeartbeatTimeout">
            <summary>
            心跳包超时时间/s，超过时间就判断为断开连接
            </summary>
        </member>
        <member name="F:ESocket.Common.ESocketConst.SendPackageEndFlag">
            <summary>
            消息结尾标记。转义字符，json里不包含，不产生冲突
            用于解决粘包问题
            对方发来了1M的数据量过来，但是，本地的buffer只有1024字节，那就代表socket需要重复很多次才能真正收完这逻辑上的一整个消息。
            对方发来了5条2个字符的消息，本地的buffer（大小1024字节）会将这5条消息全部收入囊下...
            </summary>
        </member>
        <member name="F:ESocket.Common.ESocketConst.PackageSeparator">
            <summary>
            包分隔符
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageModel.PackageCode">
            <summary>
            包码
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageModel.operationJson">
            <summary>
            参数json字符串
            </summary>
        </member>
        <member name="T:ESocket.Common.Tools.ESocketParameterTool">
            <summary>
            参数工具类
            </summary>
        </member>
        <member name="P:ESocket.Common.Tools.ESocketParameterTool.NewParameters">
            <summary>
            获得一个新的参数列表
            </summary>
        </member>
        <member name="M:ESocket.Common.Tools.ESocketParameterTool.AddParameter``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,``0)">
            <summary>
            往参数列表添加参数
            </summary>
            <param name="parameters">参数列表</param>
            <param name="key">key</param>
            <param name="value">value</param>
            <typeparam name="T">value类型</typeparam>
            <returns>参数列表</returns>
        </member>
        <member name="M:ESocket.Common.Tools.ESocketParameterTool.TryGetParameter``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,``0@)">
            /// <summary>
            从参数列表中获取参数
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="parameters">参数列表</param>
            <param name="key">key</param>
            <param name="parameter">参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="F:ESocket.Common.Tools.LitJsonUtil.NULL_JSON">
            <summary>
            ToJson(null)时返回的值
            </summary>
        </member>
        <member name="M:ESocket.Common.Tools.LitJsonUtil.NeedMap(System.Type)">
            <summary>
            给定数据类型的数据是否需要转换为json
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ESocket.Common.Tools.LitJsonUtil.ToJson(System.Object)">
            <summary>
            对象转为json
            </summary>
            <param name="obj">对象</param>
            <returns>json</returns>
        </member>
        <member name="M:ESocket.Common.Tools.LitJsonUtil.ToObject``1(System.String)">
            <summary>
            json转为对象
            </summary>
            <param name="json">json</param>
            <typeparam name="T">对象类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="T:ESocket.Common.Tools.TransporterTool">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:ESocket.Common.Tools.TransporterTool.GetReceiveBuffer">
            <summary>
            获得接收缓冲区
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TransporterTool.ToPackageBuffer(ESocket.Common.PackageModel)">
            <summary>
            PackageModel转字节数组
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TransporterTool.ToPackageModel(System.String)">
            <summary>
            Json转PackageModel
            </summary>
            <param name="json">json</param>
            <returns>PackageModel</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TransporterTool.ToFullString(System.Byte[])">
            <summary>
            字节数组转为字符串
            </summary>
            <param name="buffer">字节数组</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TransporterTool.ToFullString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节数组转为字符串
            </summary>
            <param name="buffer">字节数组</param>
            <param name="offset">起始偏移</param>
            <param name="count">长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TimeUtil.GetCurrentUtcTime">
            <summary>
            获取当前Utc时间
            </summary>
            <returns>Utc时间</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TimeUtil.GetDifferenceSeconds(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            获得time1-time2的时间差(秒)
            </summary>
            <param name="time1">时间1</param>
            <param name="time2">时间2</param>
            <param name="signed">是否带符号</param>
            <returns>时间差(秒)</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TimeUtil.GetDifferenceSeconds(System.DateTime,System.Boolean)">
            <summary>
            获得DateTime.UtcNow-time的时间差(秒)
            </summary>
            <param name="time">时间</param>
            <param name="signed">是否带符号</param>
            <returns>时间差(秒)</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TimeUtil.GetTotalMilliseconds(System.DateTime)">
            <summary>
            获取time的总共微妙数
            </summary>
            <param name="time">时间</param>
            <returns>微秒</returns>
        </member>
        <member name="M:ESocket.Common.Tools.TimeUtil.ParseFromMilliseconds(System.Int64)">
            <summary>
            将微秒数转换为时间
            </summary>
            <param name="milliseconds">微秒</param>
            <returns>时间</returns>
        </member>
        <member name="T:ESocket.Common.OperationBase">
            <summary>
            操作信息基类
            </summary>
        </member>
        <member name="F:ESocket.Common.OperationBase.Parameters">
            <summary>
            参数列表,value只支持LitJson能够解析的类型
            </summary>
        </member>
        <member name="M:ESocket.Common.OperationBase.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:ESocket.Common.OperationBase.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            有参构造函数
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="F:ESocket.Common.OperationResponse.ReturnCode">
            <summary>
            返回码，代表返回状态
            </summary>
        </member>
        <member name="T:ESocket.Common.PackageCode">
            <summary>
            包代码，区别包类型
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageCode.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageCode.Heartbeat">
            <summary>
            心跳
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageCode.Request">
            <summary>
            请求
            </summary>
        </member>
        <member name="F:ESocket.Common.PackageCode.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="T:ESocket.Common.Transporter">
            <summary>
            传输消息的抽象类
            </summary>
        </member>
        <member name="F:ESocket.Common.Transporter.mSocket">
            <summary>
            通信套接字
            </summary>
        </member>
        <member name="F:ESocket.Common.Transporter.mClientThread">
            <summary>
            监听客户端消息的线程
            </summary>
        </member>
        <member name="F:ESocket.Common.Transporter.mIsClientThreadStop">
            <summary>
            监听客户端消息的线程是否停止,所有线程中数据同步
            </summary>
        </member>
        <member name="F:ESocket.Common.Transporter.mListenHeartbeatThread">
            <summary>
            检测心跳线程
            </summary>
        </member>
        <member name="F:ESocket.Common.Transporter.mIsListenHeartbeatThreadStop">
            <summary>
            检测心跳线程是否停止,所有线程中数据同步
            </summary>
        </member>
        <member name="P:ESocket.Common.Transporter.LastListenHeartbeatTime">
            <summary>
            上一次接收心跳(收到消息)的时间
            </summary>
        </member>
        <member name="P:ESocket.Common.Transporter.LastSendHeartbeatTime">
            <summary>
            上一次发送心跳(发送消息)的时间
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.OnReceive(ESocket.Common.PackageModel)">
            <summary>
            接收到消息
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ESocket.Common.Transporter.ExceptionDisconnect">
            <summary>
            异常中断
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.DisconnectInternal">
            <summary>
            中断连接
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>返回Socket.RemoteEndPoint.ToString()。如果Socket为null则返回"null"</returns>
        </member>
        <member name="M:ESocket.Common.Transporter.SendRequest(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            发送请求
            </summary>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:ESocket.Common.Transporter.SendResponse(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            回复响应
            </summary>
            <param name="returnCode">返回码</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:ESocket.Common.Transporter.SendHeartbeat">
            <summary>
            发送心跳包
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.SendConnect(ESocket.Common.ConnectCode)">
            <summary>
            发送连接信息
            </summary>
            <param name="connectCode">连接状态</param>
        </member>
        <member name="M:ESocket.Common.Transporter.Send(ESocket.Common.PackageCode,ESocket.Common.IOperation)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.InitListenReceiveThread">
            <summary>
            初始化监听通信的线程
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.InitListenHeartbeatThread">
            <summary>
            初始化检测心跳线程
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.ListenReceiveThread">
            <summary>
            监听消息
            </summary>
        </member>
        <member name="M:ESocket.Common.Transporter.ListenHeartbeatThread">
            <summary>
            监听心跳,是否正常连接
            </summary>
        </member>
        <member name="T:ESocket.Common.ConnectCode">
            <summary>
            连接状态码
            </summary>
        </member>
        <member name="F:ESocket.Common.ConnectCode.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="F:ESocket.Common.ConnectCode.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
    </members>
</doc>
